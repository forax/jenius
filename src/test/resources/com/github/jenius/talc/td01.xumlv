<?xml version="1.0"  encoding="UTF-8"?>
<!DOCTYPE index PUBLIC "-//University of Marne-la-Vallee//DTD tipi//EN"
                "http://igm.univ-mlv.fr/ens/resources/tipi.dtd">
<td>
 <title>
  Premiers pas en Java, chaînes de caractères, tableaux, boucles
 </title>

 <exercise title="Hello Groland">
   <paragraph>
     On rappelle qu'il est préférable en Java que chaque classe
     soit définie dans un fichier qui lui est propre.
     Le nom du fichier doit être le nom de la classe qu'il contient,
     auquel on ajoute le suffixe <bold>.java</bold>.
     Les noms des classes doivent être constitués de mots accolés
     dont la première lettre est une majuscule.
    <br/>
 	Dans un premier temps nous allons écrire des petits programmes
 	permettant de se familiariser avec le compilateur,
 	la machine virtuelle et les méthodes.
   </paragraph>
   <list style="ordered">
    <item>
     Écrire le programme suivant :
     <code>
      public class HelloGroland {
        public static void main(String[] args) {
          System.out.println("Hello Groland");
        }
      }
     </code>
     dans votre éditeur de texte préféré et sauvegarder celui-ci
     sous le nom <tt>HelloGroland.java</tt>
    </item>
    <item>
     Compiler le programme en utilisant le commande <tt>javac</tt>
     puis vérifier que le fichier <tt>.class</tt> correspondant
     existe bien.
     <code>
      javac HelloGroland.java
     </code>
    </item>
    <item>
     Exécuter le programme avec la commande <tt>java</tt>
     <code>
      java HelloGroland
     </code>
     On ne met pas ".class" parce que la machine virtuelle le rajoute
     toute seule.
    </item>
   </list>
 </exercise>

 <exercise title="Afficher les arguments de la ligne de commande">
  <paragraph>
    Écrire une classe <tt>PrintArgs</tt> qui
    affiche les arguments de la ligne de commande.

    <code>
      $ java Voici des arguments
      Voici
      des
      arguments
    </code>

   Les arguments de la ligne de commande sont stockés dans
   le tableau de chaînes de caractères passé en
   argument à la méthode
   <tt>public static main(String[] args)</tt>.
   <list>
    <item>
     Dans un premier temps, afficher le premier argument
     de la ligne de commande (dans notre exemple <tt>Voici</tt>).
    <br/>
     Que se passe-t'il si l'on ne passe pas d'argument lors
     de l'exécution du programme ?
    </item>
    <item>
     Ecrire une boucle affichant le contenu du tableau
     en sachant qu'en Java les tableaux possèdent un champ (un attribut)
     <tt>length</tt> qui renvoie la taille du tableau.
    </item>
    <item>
     Changer votre programme pour utiliser la syntaxe dite 'foreach'
     <tt>for(Type value:array)</tt>
    </item>
   </list>
  </paragraph>
 </exercise>

 <exercise title="Calculette simple">
   <paragraph>
    Écrire un programme prenant un nombre sur l'entrée standard
    et affichant celui-ci
   <br/>
    Pour cela, on utilisera un objet <tt>Scanner</tt>
    et particulièrement sa méthode <tt>nextInt()</tt>.
   <br/>
    <code>
	 import java.util.Scanner;

	 public class Calc {
	   public static void main(String[] args) {
	     Scanner scanner;
	     scanner=new Scanner(System.in);
	     int value;
	     value=scanner.nextInt();
	     // completer ici
	   }
	 }
    </code>
   <br/>
    Pour comprendre le programme, il est utile de regarder
    la documentation disponible ici, et même de
    mettre les liens en bookmark (signet, favoris, etc.)
    <list>
     <item>
      <link href="http://java.sun.com/javase/6/docs/api/index.html">la javadoc</link>.
     </item>
     <item>
      <link href="http://java.sun.com/javase/6/docs/">les guides</link>.
     </item>
     <item>
	   <link href="http://java.sun.com/docs/books/tutorial/">des tutoriaux (des fois un peu datés)</link>.
     </item>
    </list>
   </paragraph>

   <list style="ordered">
    <item>
     Indiquer dans le programme où sont les variables
     et quel est leur type associé.
    </item>
    <item>
     Recopier le programme précédent et le compléter pour
     qu'il affiche le nombre saisi par l'utilisateur.
    </item>
    <item>
     Modifier le programme pour déclarer et initialiser
     les variables en une seule ligne
    </item>
    <item>
     Expliquer la ligne :
     <code>
      import java.util.Scanner;
     </code>
    </item>
    <item>
     Modifier le programme pour qu'il demande deux entier et
     affiche la somme de ceux-ci.
    </item>
    <item>
     Afficher en plus de la somme, la différence, le produit,
     le quotien et le reste.
    </item>
   </list>
 </exercise>

 <exercise title="Bien le bonjour">
  <paragraph>
   Écrire un programme demandant à un utilisateur quel est
   son nom et affichant "bonjour" suivi du nom rentré précédemment.
  <br/>
   Faite en sorte d'afficher le texte "bonjour" et le nom
   sur une seule et même ligne
   <list>
    <item>
     Soit un utilisant <tt>System.out.print()</tt>
    </item>
    <item>
     Soit en utilisant le concaténation des chaînes de caractères
     (le <tt>+</tt>).
    </item>
   </list>
  </paragraph>
 </exercise>

 <exercise title="De C vers Java">
  <paragraph>
    Cet exemple a pour but de montrer les différences de performance
    entre un programme en C et le même en Java.
  </paragraph>

  <code>
     #include &lt;stdio.h&gt;
     #include &lt;stdlib.h&gt;

     int pascal (int nBut, int pBut){
       int * tab;
       unsigned int n, i;

       tab = (int *)malloc ((nBut+1)*sizeof(int));
       if(tab==NULL){
         fprintf(stderr,"Pas assez de place\n");
         exit(0);
       }

       tab[0] = 1;

       for(n=1; n&lt;=nBut; n++){
         tab[n] = 1;

         for(i=n-1; i&gt;0; i--)
           tab[i] = tab[i-1] + tab[i];
       }

       int result=tab[pBut];
       free(tab);
       return result;
     }

     int main(int argc, char * argv[]) {
       printf(" Cn, p = %d\n", pascal (30000, 250));
       return 0;
     }
  </code>
  <list style="ordered">
   <item>
    Compiler (<tt>gcc pascal.c)</tt> et exécuter le
    programme <tt>a.out</tt> en demandant au système
    le temps d'exécution du programme. <tt>(time a.out)</tt>.
   </item>
   <item>
    Écrire le programme (<tt>Pascal.java</tt>) équivalent en Java.
    Pour une fois, servez-vous du copier/coller.
    Compiler le programme. Exécuter le en mesurant le temps
    (toujours avec <tt>time</tt>).
   </item>
  </list>
  <paragraph>
   Comment peut-on expliquer la différence de vitesse ?
  </paragraph>
 </exercise>
</td>